
==================== FINAL INTERFACE ====================
2017-08-30 19:52:04.909704 UTC

interface main@main:Main 8002
  interface hash: f2f21a41d35b22b17e08759e149fd5d1
  ABI hash: f3ccca0d4fcf819035dfa7ae7d345578
  export-list hash: 98c147f0607fed7889e3fc49cc5382e3
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 81707317698767669a2e208644d49337
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.getInt
  Main.main
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      hacker-rank-0.1.0.0@hacker-rank-0.1.0.0-GjpRxb8iNAQ3hTKyQdsJV0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Control.Monad a6784c5dab0d75c63dabec5a37843f98
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  base-4.9.1.0:System.IO c9de64c5f5407c4cf1c52500c4d15200
import  -/  base-4.9.1.0:Text.Read 75c59863e882ebaec4532e9465e2ee9b
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
import  -/  hacker-rank-0.1.0.0@hacker-rank-0.1.0.0-GjpRxb8iNAQ3hTKyQdsJV0:Lib f1e64d9cf60a706cba1cb7615fbdc6c2
import  -/  hacker-rank-0.1.0.0@hacker-rank-0.1.0.0-GjpRxb8iNAQ3hTKyQdsJV0:StringMingling aff7b39745008f31d7af11f4d07eb1b0
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
06043dea18b01e51785aa9126d5d1bb1
  $wloop ::
    GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.Types.Char]] #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0] -}
cdd2206eb3993f1534ba116589cc3274
  getInt :: GHC.Types.IO GHC.Types.Int
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getInt1 `cast` (Sym (GHC.Types.N:IO[0] <GHC.Types.Int>_R)) -}
6814bddcde9fd6baa1b5a63ef5b12326
  getInt1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 Main.getInt2 ipv1 ipv }) -}
a9be699137de53ce14397210a5b7c0ab
  getInt2 ::
    GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Types.Int #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (s :: GHC.Base.String)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 (# eta,
                    case Text.Read.readEither6
                           @ GHC.Types.Int
                           (Text.ParserCombinators.ReadP.run
                              @ GHC.Types.Int
                              Main.getInt5
                              s) of wild {
                      [] -> Main.getInt4
                      : x ds
                      -> case ds of wild1 { [] -> x : ipv ipv1 -> Main.getInt3 } } #)) -}
feec49ca13ca0c7bc5e49cc48769c026
  getInt3 :: GHC.Types.Int
  {- Strictness: x -}
18c5282ab5debd3e25336dfa2382982f
  getInt4 :: GHC.Types.Int
  {- Strictness: x -}
18a0ebfa09a7bd0cda2d2b6e5ab5968d
  getInt5 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: (GHC.Read.$fReadInt3
                   GHC.Read.$fReadInt_$sconvertInt
                   Text.ParserCombinators.ReadPrec.minPrec
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
f192e43835ee430a957bdfcee8603565
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
e89d31e34b5d15d102d9dd13131d1767
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.IO.Handle.Internals.wantReadableHandle_1
                        @ GHC.Base.String
                        GHC.IO.Handle.Text.hGetLine4
                        GHC.IO.Handle.FD.stdin
                        GHC.IO.Handle.Text.hGetLine2
                          `cast`
                        (<GHC.IO.Handle.Types.Handle__>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           Main.getInt5
                           ipv1) of wild {
                   []
                   -> case Main.getInt4
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                      of {}
                   : x ds
                   -> case ds of wild1 {
                        []
                        -> case x of ww { GHC.Types.I# ww1 ->
                           case Main.$wloop ww1 ipv of ds2 { (#,#) ipv2 ipv3 ->
                           Main.main2 ipv3 ipv2 } }
                        : ipv2 ipv3
                        -> case Main.getInt3
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {} } } }) -}
0c84b8c5b253af5782feaf70f081a655
  main2 ::
    [GHC.Base.String]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
facf21c03edd29fa36e480ca8d4acde3
  main3 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

